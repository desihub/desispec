#!/usr/bin/env python

"""
Run the quicklook pipeline for DESI, given a quicklook configuration file


S. Kama, G. Dhungana 
SMU
Spring 2016
"""

from __future__ import absolute_import, division, print_function

from desispec.quicklook import quicklook,qllogger
import desispec.image as image
import desispec.frame as frame
import desispec.io.frame as frIO
import desispec.io.image as imIO

import os,sys
import yaml

import optparse as op

def ql_main():

    p = op.OptionParser(usage = "%")
    p.add_option("-c", "--config_file", type=str, help="yaml file containing config dictionary",dest="config")
    p.add_option("-g", "--gen_testconfig", type=str, help="generate test configuration",dest="dotest")
    qlog=qllogger.QLLogger("QuickLook",20)
    log=qlog.getlog()
    opts, args = p.parse_args()

    if opts.dotest is not None:
        quicklook.testconfig(opts.dotest)
    if opts.config is None:
        log.critical("Need config file")
        sys.exit("Missing config parameter")
    if os.path.exists(opts.config):
        if "yaml" in opts.config:
            configdict=yaml.load(open(opts.config,'rb'))
    else:
        log.critical("Can't open config file %s"%(opts.config))
        sys.exit("Can't open config file")

    pipeline, convdict = quicklook.setup_pipeline(configdict)
    res=quicklook.runpipeline(pipeline,convdict,configdict)
    inpname=configdict["RawImage"]
    chan,cam,expid=quicklook.get_chan_cam_exp(inpname) #- may be other ways to get it as well

    if isinstance(res,image.Image):
        if configdict["OutputFile"]: finalname=configdict["OutputFile"]
        else: finalname="image-%s%d-%08d.fits"%(chan,cam,expid)
        imIO.write_image(finalname,res,meta=None)        
    elif isinstance(res,frame.Frame):
        if configdict["OutputFile"]: finalname=configdict["OutputFile"]
        else: finalname="frame-%s%d-%08d.fits"%(chan,cam,expid)
        frIO.write_frame(finalname,res,header=None)
    else:
        log.error("Result of pipeline is in unkown type %s. Don't know how to write"%(type(res)))
        sys.exit("Unknown pipeline result type %s."%(type(res)))
    log.info("Pipeline completed. Final result is in %s"%finalname)
if __name__=='__main__':
    ql_main()
