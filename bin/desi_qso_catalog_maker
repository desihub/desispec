#!/usr/bin/env python
# coding: utf-8

import os
import sys
import time
import argparse

from desispec.qso_cat_utils import qso_catalog_maker, save_dataframe_to_fits


def collect_argparser():
    parser = argparse.ArgumentParser(description="Compile the different QSO identifications to build the QSO catalog")

    parser.add_argument("--redrock", type=str, required=True,
                        help="redrock file with redshifts (formerly zbest)")
    parser.add_argument("--mgii", type=str, required=True,
                        help="mgii file containing the mgii afterburner output")
    parser.add_argument("--qn", type=str, required=True,
                        help="qn file containing the qn afterburner (with new run of RR) output")

    parser.add_argument("--output", type=str, required=True,
                        help="output filename where the result of the MgII will be saved")

    parser.add_argument("--clobber", type=bool, required=False, default=True,
                        help="EXPAND (clobber=False) or OVERWRITE (clobber=True) the output file. By default clobber=True")

    parser.add_argument("--use_old_extname_for_fitsio", type=bool, required=False, default=False,
                        help="For FUJI extname QN+RR is remplaced by QN_RR to avoid error with newer version of fitsio (>= 1.1.3). \
                              To use desi_qso_qn_afterburner for everest and older files please activate this flag and use ONLY fitsio = 1.1.2")

    return parser.parse_args()


if __name__ == "__main__":
    from desiutil.log import get_logger
    log = get_logger()

    start = time.time()

    args = collect_argparser()

    if os.path.isfile(args.redrock) & os.path.isfile(args.mgii) & os.path.isfile(args.qn):
        # build QSO cat from RR, MgII and QN files following the proposed flowchart
        QSO_cat = qso_catalog_maker(args.redrock, args.mgii, args.qn, args.use_old_extname_for_fitsio)
        # Save QSO catalog in a fits file
        save_dataframe_to_fits(QSO_cat, args.output, args.clobber)

    else: # file for the consider Tile / Night / petal does not exist
        log.error(f"There is problem with files: {args.redrock} or {args.mgii} or {args.qn}")
        sys.exit()

    log.info(f"EXECUTION TIME: {time.time() - start:3.2f} s.")
