#!/usr/bin/env python
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
Run calibration planning.
"""

from __future__ import absolute_import, division, print_function

import sys
import os
import numpy as np
import argparse
import re

import desispec.io as io
from desispec.log import get_logger
import desispec.pipeline as pipe


def main():
    parser = argparse.ArgumentParser( description='Run calibration for a night of data using multiple processes.' )
    parser.add_argument( '--raw', required=False, default=None, help='raw data directory (for fibermaps)' )
    parser.add_argument( '--redux', required=False, default=None, help='output directory' )
    parser.add_argument( '--night', required=True, default=None, help='night (YYYYMMDD)' )
    parser.add_argument( '--expid', required=False, default=None, help='only process this exposure ID' )
    parser.add_argument( '--dump', required=True, default=None, help='Write commands to this file.')
    args = parser.parse_args()

    log = get_logger()

    # If data directories are not given, get them from environment
    # variables.

    date = io.validate_night(args.night)

    rawdir = args.raw
    if rawdir is None:
        rawdir = io.rawdata_root()
    else:
        # We are overriding the raw data directory.
        # Set the correct environment variable so that
        # the I/O routines work.
        os.environ['DESI_SPECTRO_DATA'] = os.path.abspath(rawdir)
    rawdir = os.path.abspath(rawdir)

    specdir = args.redux
    if specdir is None:
        specdir = io.specprod_root()
    else:
        # We are overriding the raw data directory.
        # Set the correct environment variable so that
        # the I/O routines work.
        os.environ['DESI_SPECTRO_REDUX'] = os.path.abspath(specdir)
    specdir = os.path.abspath(specdir)

    cal2d = os.path.join(specdir, 'calib2d')
    calnight = os.path.join(cal2d, args.night)

    # get the list of exposures

    (expid, exptype, fullframes) = pipe.find_frames(specdir, args.night)

    # if requested, restrict the exposure list to a single ID
    frames = {}
    if args.expid is not None:
        frames[args.expid] = fullframes[args.expid]
    else:
        frames = fullframes

    # fibermaps- this is a temporary solution until calibration
    # codes can use the fibermap info in the frame files.

    fibermap = {}
    for ex in expid:
        fibermap[ex] = os.path.join(rawdir, args.night, "fibermap-{:08d}.fits".format(ex))

    # compute the tasks for all steps

    flat_tasks = pipe.tasks_fiberflat(expid, exptype, frames, calnight)

    sky_tasks = pipe.tasks_sky(expid, exptype, frames, calnight, fibermap)

    star_tasks = pipe.tasks_star(expid, exptype, frames, calnight, fibermap)

    calcalc_tasks = pipe.tasks_calcalc(expid, exptype, frames, calnight, fibermap)

    calapp_tasks = pipe.tasks_calapp(expid, exptype, frames, calnight)

    # dump the low-level commands that will be run
    # and then exit.

    with open(args.dump, 'w') as d:
        for t in flat_tasks:
            com = " ".join(t['command'])
            d.write("{}\n".format(com))
        for t in sky_tasks:
            com = " ".join(t['command'])
            d.write("{}\n".format(com))
        for t in star_tasks:
            com = " ".join(t['command'])
            d.write("{}\n".format(com))
        for t in calcalc_tasks:
            com = " ".join(t['command'])
            d.write("{}\n".format(com))
        for t in calapp_tasks:
            com = " ".join(t['command'])
            d.write("{}\n".format(com))


if __name__ == "__main__":
    main()

