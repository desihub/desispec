#!/usr/bin/env python

"""
Map which tiles+petals are covered by which healpix
"""

import os, sys, glob, json, argparse
import numpy as np
import fitsio
from astropy.table import Table
from desimodel.footprint import radec2pix
from desiutil.log import get_logger
from desispec.io import specprod_root, iterfiles
from desispec.pixgroup import fibermap2tilepix

p = argparse.ArgumentParser()
p.add_argument('--reduxdir', type=str,
        help='spectro redux base dir overrides $DESI_SPECTRO_REDUX/$SPECPROD')
p.add_argument('--nside', type=int, default=64,
        help='healpix nside (default 64)')
p.add_argument('-o', '--outfile', type=str, required=True,
        help='output fits file (TILEID, PETAL_LOC, HEALPIX)')

args = p.parse_args()
log = get_logger()

if args.reduxdir is None:
    args.reduxdir = specprod_root()

assert args.outfile.endswith('.fits')

#- tilepix[tileid][petal] = [list of healpix]
tilepix = dict()

spectrafiles = sorted(iterfiles(f'{args.reduxdir}/healpix', 'spectra-'))

n = len(spectrafiles)
if n == 0:
    log.error(f'No spectra found in {args.reduxdir}/healpix')
    sys.exit(1)
else:
    log.info(f'Processing {n} spectra from {args.reduxdir}/healpix')

columns = ['PETAL_LOC', 'TARGET_RA', 'TARGET_DEC', 'TILEID']
for filename in spectrafiles:
    fm = fitsio.read(filename, 'FIBERMAP', columns=columns)
    for tileid in set(fm['TILEID']):
        if tileid in tilepix:
            continue
        else:
            shortfile = filename.replace(f'{args.reduxdir}/healpix/', '')
            log.info(f'tile {tileid} fibermap {shortfile}')
            fmtile = fm[fm['TILEID'] == tileid]
            tilepix[str(tileid)] = fibermap2tilepix(fmtile, args.nside)

#- Convert to a table
rows = list()
for tileid in tilepix:
    for petal in range(10):
        for pix in tilepix[tileid][petal]:
            rows.append( (tileid, petal, pix) )

tx = Table(rows=rows, names=('TILEID', 'PETAL_LOC', 'HEALPIX'),
        dtype=(np.int32, np.int16, np.int32))

#- Write fits and json outputs
tx.meta['EXTNAME'] = 'TILEPIX'
tx.meta['HPXNSIDE'] = args.nside
tx.meta['HPXNEST'] = True
tx.write(args.outfile, overwrite=True)

jsonout = os.path.splitext(args.outfile)[0] + '.json'
with open(jsonout, 'w') as fx:
    json.dump(tilepix, fx)




