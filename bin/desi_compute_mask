#!/usr/bin/env python


import sys,string
import astropy.io.fits as pyfits
import argparse
import numpy as np
#import matplotlib.pyplot as plt
import scipy.ndimage.filters

from desiutil.log import get_logger
from desispec.preproc import  _parse_sec_keyword
from desispec.maskbits import ccdmask

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
description="Compute a mask using preprocessed dark images",
 epilog='''
                                 Input is a list of preprocessed dark images.
                                 This code will mask nsig. outliers, mask entire rows and columns above a given fraction of masked pixels.
                                 Remove from mask isolated pixels that are presumably statistical fluctuations,
                                 apply a median filter of size npix to smooth the mask (can be turned off by setting npix=0)
                                 This code was used to procude the EM spectrograph early NIR (Z1) ccd data mask.
                                 ''')

parser.add_argument('-i','--image', type = str, default = None, required = True,
                    help = 'path of preprocessed dark image fits file')
parser.add_argument('-o','--out', type = str, default = None, required = True,
                    help = 'path to output mask fits file')
parser.add_argument('--nsig', type = float, default = 3., required = False,
                    help = 'n sigma threshold')
parser.add_argument('--frac', type = float, default = 0.2, required = False,
                    help = 'fraction of bad pixels in row or column above which the entire row or column is masked')
parser.add_argument('--npix', type = float, default = 50., required = False,
                    help = 'number of pixels for median filtering')


args = parser.parse_args()
log  = get_logger()


image_file  = pyfits.open(args.image)
flux = image_file[0].data
ivar = image_file["IVAR"].data*(image_file["MASK"].data==0)
# remove median flux to remove mean dark current
flux -= np.median(flux)

mask   = np.zeros(flux.shape, dtype=np.int32)

mask[(ivar*flux**2)>(args.nsig**2)] |= ccdmask.BAD

log.info("mask entire row or column if more than %f of pixels are masked"%args.frac)
masked_lines = np.zeros(flux.shape, dtype=np.int32)
n0=mask.shape[0]
n1=mask.shape[1]
for i in range(mask.shape[0]) :
    badfrac=np.sum(mask[i]&ccdmask.BAD)/float(n1*ccdmask.BAD)
    if badfrac>args.frac :
        log.info("masking entire row %d with a fraction of bad pixels=%f"%(i,badfrac))
        masked_lines[i] |= ccdmask.BAD
for i in range(mask.shape[1]) :
    badfrac=np.sum(mask[:,i]&ccdmask.BAD)/float(n0*ccdmask.BAD)
    if badfrac>args.frac :
        log.info("masking entire column %d with a fraction of bad pixels=%f"%(i,badfrac))
        masked_lines[:,i] |= ccdmask.BAD

only_rows_or_columns = False

if only_rows_or_columns :
    mask = masked_lines
else :
    mask |= masked_lines


log.info("mask all rows left (or right) of entirely masked row")
# up
for i in np.arange(mask.shape[0]//2,mask.shape[0]) :
    ismasked=np.sum(mask[i]&ccdmask.BAD)==float(n1*ccdmask.BAD)
    if ismasked :
        log.info("mask all rows >= %d"%i)
        mask[i:] |=ccdmask.BAD
        break
# down
for i in np.arange(mask.shape[0]//2,0,-1) :
    ismasked=np.sum(mask[i]&ccdmask.BAD)==float(n1*ccdmask.BAD)
    if ismasked :
        log.info("mask all rows <= %d"%i)
        mask[:i] |=ccdmask.BAD
        break
# right
for i in np.arange(mask.shape[1]//2,mask.shape[1]) :
    ismasked=np.sum(mask[:,i]&ccdmask.BAD)==float(n0*ccdmask.BAD)
    if ismasked :
        log.info("mask all columns >= %d"%i)
        mask[:,i:] |=ccdmask.BAD
        break
# left
for i in np.arange(mask.shape[1]//2,0,-1) :
    ismasked=np.sum(mask[:,i]&ccdmask.BAD)==float(n0*ccdmask.BAD)
    if ismasked :
        log.info("mask all columns <= %d"%i)
        mask[:,:i] |=ccdmask.BAD
        break

if not only_rows_or_columns :

    # unmask isolated masked pixels which are probably statistical fluctuations
    sum99=np.zeros(mask.shape)
    sum99[1:-1,1:-1]=mask[1:-1,1:-1]
    sum99[1:-1,1:-1]+=mask[0:-2,1:-1]
    sum99[1:-1,1:-1]+=mask[2:,1:-1]
    sum99[1:-1,1:-1]+=mask[1:-1,0:-2]
    sum99[1:-1,1:-1]+=mask[0:-2,0:-2]
    sum99[1:-1,1:-1]+=mask[2:,0:-2]
    sum99[1:-1,1:-1]+=mask[1:-1,2:]
    sum99[1:-1,1:-1]+=mask[0:-2,2:]
    sum99[1:-1,1:-1]+=mask[2:,2:]
    nisolated=np.sum((sum99==mask))
    log.info("number of isolated masked pixels to unmask = %d"%nisolated)
    mask[(sum99==mask)]=0

    if args.npix>0 :
        log.info("do a median filtering")
        for i in range(n1) :
            mask[:,i]=scipy.ndimage.filters.median_filter(mask[:,i],args.npix)
        for i in range(n0) :
            mask[i]=scipy.ndimage.filters.median_filter(mask[i],args.npix)



#chi2=ivar*flux**2
#pyfits.writeto("chi2.fits",chi2,clobber=True)
pyfits.writeto(args.out,mask,clobber=True)


#plt.show()
