#!/usr/bin/env python


import sys,string
import astropy.io.fits as pyfits
import argparse
import numpy as np

from desispec.io import read_image
from desispec.preproc import masked_median
from desiutil.log import get_logger
from desispec.preproc import _parse_sec_keyword
from desispec.maskbits import ccdmask


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                 description="Compute a master pixel mask",
                                 epilog='''
                                 Input is a list of preprocessed dark images. The code will look for pixels that are systematically outliers. Pixels read after a masked pixel in the same column are also masked if the average number of masked pixels in the column (downstream) is larger than a given fraction.''')

parser.add_argument('-i', '--infile', type = str, default = None, required = True, nargs = "*",
                    help = 'path to preprocessed dark images')
parser.add_argument('-o','--outfile', type = str, default = None, required = True,
                    help = 'output pixel mask filename')
parser.add_argument('--debug', action = 'store_true',
                    help = 'write extra images for debugging')
parser.add_argument('--frac-downstream-mask', type = float, default = 0.3, required = False,
                    help = 'threshold fraction to flag pixels read after a masked pixel in the same column')
parser.add_argument('--nsig', type = float, default = 3, required = False,
                    help = 'threshold for masking a pixel in units of the median number of sigma for this pixel over input images')

args = parser.parse_args()
log  = get_logger()

log.info("read images")

nsigs  = list()
header = None
for filename in args.infile :
    log.info("reading {}".format(filename))
    img = read_image(filename)
    if header is None : header = img.meta # save one header
    nsigs.append(img.pix*np.sqrt(img.ivar))
nsigs = np.median(np.array(nsigs),axis=0)
bad = ((nsigs==0)|(np.abs(nsigs)>args.nsig)).astype(int) # nsigs=0 means systematically masked in images, this must be bad. nsig>5 is also bad

meanbad=None
orbad=None

if args.debug :
    meanbad=np.zeros(bad.shape)
    orbad=np.zeros(bad.shape)

for amp in "ABCD" :
    try :
        ccdsec = header["CCDSEC"+amp]
    except KeyError as e :
        log.error(e)
        raise e
    xyslice = _parse_sec_keyword(ccdsec)
    abad = bad[xyslice]
    if amp == "C" or amp == "D" :
        tmp=np.cumsum(abad,axis=0).astype(float)/np.cumsum(np.ones(abad.shape),axis=0).astype(float)
        tmp2=np.cumsum(abad,axis=0)>0
    else :
        tmp=(np.cumsum(abad[::-1],axis=0).astype(float)/np.cumsum(np.ones(abad.shape),axis=0).astype(float))[::-1]
        tmp2=(np.cumsum(abad[::-1],axis=0)[::-1]>0).astype(int)

    if args.debug :
        meanbad[xyslice]=tmp
        orbad[xyslice]=tmp2

    # we mask pixels of the same column in the readout direction if more than 30% of pixels downstream are bad
    bad[xyslice] += (bad[xyslice]==0)*((tmp>0.3)*(tmp2)).astype(int)

if args.debug :
    pyfits.writeto("nsigs.fits",nsigs,overwrite=True) ; print("wrote nsigs.fits")
    pyfits.writeto("bad.fits",bad,overwrite=True) ; print("wrote bad.fits")
    pyfits.writeto("meanbad.fits",meanbad,overwrite=True) ; print("wrote meanbad.fits")
    pyfits.writeto("orbad.fits",orbad,overwrite=True) ; print("wrote orbad.fits")


pixmask=np.zeros(bad.shape,dtype=np.int16)
pixmask[bad>0]=ccdmask.DEAD

hdulist=pyfits.HDUList([pyfits.PrimaryHDU(pixmask)])
i=0
for filename in args.infile :
    hdulist[0].header["INPUT%03d"%i]=filename
    i+=1

ndead=np.sum(pixmask&ccdmask.DEAD>0)
hdulist[0].header["NDEAD"]=ndead
log.info("number of DEAD pixels =  {}".format(ndead))
hdulist[0].header["BUNIT"]=("","bitmask, see definition of bits in desispec/maskbits.py")
hdulist[0].header["EXTNAME"]="MASK"
hdulist.writeto(args.outfile, overwrite=True)
log.info("wrote {}".format(args.outfile))
