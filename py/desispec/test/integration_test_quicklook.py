"""
Run integration test for QuickLook pipeline

python -m desispec.test.integration_test_quicklook
"""
from shutil import copyfile
import os
import sys
import argparse
import desiutil.log as logging
from desispec.util import runcmd

desi_templates_available = 'DESI_ROOT' in os.environ
desi_root_available = 'DESI_ROOT' in os.environ

#- Default values for all arguments unless told otherwise 
def parse(options=None):
    """
    Can change night or number of spectra to be simulated and delete all output of test
    Won't overwrite exisiting data unless overwrite argument provided

    QuickLook data read from $QL_SPEC_DATA
    QuickLook output written to $QL_SPEC_REDUX

    Environment Variable check included here
    """
    parser=argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--night',type=str,default='20160728',help='night to be simulated')
    parser.add_argument('--nspec',type=int,default=5,help='number of spectra to be simulated, starting from first')
    parser.add_argument('--overwrite', action='store_true', help='overwrite existing files')
    parser.add_argument('--delete', action='store_true', help='delete all files generated by this test')

    if options is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(options)

    log = logging.get_logger()
    log.setLevel(logging.DEBUG)
    missing_env = False

    if 'DESI_BASIS_TEMPLATES' not in os.environ:
        log.warning('missing $DESI_BASIS_TEMPLATES needed for simulating spectra'.format(name))
        missing_env = True

    if not os.path.isdir(os.getenv('DESI_BASIS_TEMPLATES')):
        log.warning('missing $DESI_BASIS_TEMPLATES directory')
        log.warning('e.g. see NERSC:/project/projectdirs/desi/spectro/templates/basis_templates/v1.0')
        missing_env = True

    for name in (
        'DESI_SPECTRO_SIM', 'PIXPROD', 'DESIMODEL'):
        if name not in os.environ:
            log.warning("missing ${}".format(name))
            missing_env = True

    if 'QL_SPEC_REDUX' not in os.environ:
        log.warning("missing ${}".format('QL_SPEC_REDUX'))
        missing_env = True

    if 'QL_SPEC_DATA' not in os.environ:
        log.warning("missing ${}".format('QL_SPEC_DATA'))
        missing_env = True

    if missing_env:
        log.warning("Why are these needed?")
        log.warning("    Simulations written to $DESI_SPECTRO_SIM/$PIXPROD")
        log.warning("    Raw data read from $QL_SPEC_DATA")
        log.warning("    Spectro/QuickLook pipeline output written to $QL_SPEC_REDUX")
        log.warning("    PSF files are found in $DESIMODEL")
        log.warning("    Templates are read from $DESI_BASIS_TEMPLATES")

    #- Wait until end to raise exception so that we report everything that
    #- is missing before actually failing
    if missing_env:
        log.critical("missing env vars; exiting without running simulations or quicklook pipeline")
        sys.exit(1)

    sim_dir = os.path.join(os.environ['DESI_SPECTRO_SIM'],os.environ['PIXPROD'],args.night)
    data_dir = os.path.join(os.environ['QL_SPEC_DATA'],args.night)
    output_dir = os.environ['QL_SPEC_REDUX']

    if args.overwrite:
        if os.path.exists(sim_dir):
            sim_files = os.listdir(sim_dir)
            for file in range(len(sim_files)):
                sim_file = os.path.join(sim_dir,sim_files[file])
                os.remove(sim_file)
            os.rmdir(sim_dir)
        if os.path.exists(data_dir):
            data_files = os.listdir(data_dir)
            for file in range(len(data_files)):
                data_file = os.path.join(data_dir,data_files[file])
                os.remove(data_file)
            os.rmdir(data_dir)
        if os.path.exists(output_dir):
            exp_dir = os.path.join(output_dir,'exposures',args.night)
            calib_dir = os.path.join(output_dir,'calib2d',args.night)
            if os.path.exists(exp_dir):
                id_dir = os.path.join(exp_dir,'00000002')
                if os.path.exists(id_dir):
                    id_files = os.listdir(id_dir)
                    for file in range(len(id_files)):
                        id_file = os.path.join(id_dir,id_files[file])
                        os.remove(id_file)
                    os.rmdir(id_dir)
                exp_files = os.listdir(exp_dir)
                for file in range(len(exp_files)):
                    exp_file = os.path.join(exp_dir,exp_files[file])
                    os.remove(exp_file)
                os.rmdir(exp_dir)
            if os.path.exists(calib_dir):
                calib_files = os.listdir(calib_dir)
                for file in range(len(calib_files)):
                    calib_file = os.path.join(calib_dir,calib_files[file])
                    os.remove(calib_file)
                os.rmdir(calib_dir)            

    else:
        if os.path.exists(sim_dir) or os.path.exists(data_dir) or os.path.exists(output_dir):
            raise RuntimeError('Files already exist for this night! Can overwrite or change night if necessary')

    return args

def sim(night,nspec):
    """
    Simulate data as part of the QuickLook integration test.

    Args:
        night (str): YEARMMDD
        nspec (int): number of spectra to simulate
 
    Raises:
        RuntimeError if any script fails
    """

    psf_b = os.path.join(os.environ['DESIMODEL'],'data','specpsf','psf-b.fits')
    psf_r = os.path.join(os.environ['DESIMODEL'],'data','specpsf','psf-r.fits')
    psf_z = os.path.join(os.environ['DESIMODEL'],'data','specpsf','psf-z.fits')

    #- Create files needed to run quicklook
    sim_dir = os.path.join(os.environ['DESI_SPECTRO_SIM'],os.environ['PIXPROD'],night)
    data_dir = os.path.join(os.environ['QL_SPEC_DATA'],night)
    output_dir = os.environ['QL_SPEC_REDUX']
    exp_dir = os.path.join(output_dir,'exposures',night)
    calib_dir = os.path.join(output_dir,'calib2d',night)
    psf_dir = os.path.join(output_dir,'calib2d','psf',night)

    # runcmd -> result, success; so runcmd(cmd)[1] is success boolean
    cmd = "newarc --nspec {} --night {} --expid 0".format(nspec,night)
    if not runcmd(cmd)[1]:
        raise RuntimeError('newexp failed for arc exposure')

    cmd = "newflat --nspec {} --night {} --expid 1".format(nspec,night)
    if not runcmd(cmd)[1]:
        raise RuntimeError('newexp failed for flat exposure')

    cmd = "newexp-random --program dark --nspec {} --night {} --expid 2".format(nspec,night)
    if not runcmd(cmd)[1]:
        raise RuntimeError('newexp failed for dark exposure')

    cmd = "pixsim --night {} --expid 0 --nspec {} --rawfile {}/desi-00000000.fits.fz --preproc --preproc_dir {}".format(night,nspec,data_dir,data_dir)
    if not runcmd(cmd)[1]:
        raise RuntimeError('pixsim failed for arc exposure')

    cmd = "pixsim --night {} --expid 1 --nspec {} --rawfile {}/desi-00000001.fits.fz --preproc --preproc_dir {}".format(night,nspec,data_dir,data_dir)
    if not runcmd(cmd)[1]:
        raise RuntimeError('pixsim failed for flat exposure')

    cmd = "pixsim --night {} --expid 2 --nspec {} --rawfile {}/desi-00000002.fits.fz".format(night,nspec,data_dir)
    if not runcmd(cmd)[1]:
        raise RuntimeError('pixsim failed for dark exposure')

#    cmd = "desi_extract_spectra -i {}/pix-b0-00000001.fits -o {}/frame-b0-00000001.fits -f {}/fibermap-00000001.fits -p {} -w 3550,5730,0.8 -n {}".format(data_dir,exp_dir,sim_dir,psf_b,nspec)
#    if not runcmd(cmd)[1]:
#        raise RuntimeError('desi_extract_spectra failed for camera b0')

    cmd = "desi_extract_spectra -i {}/pix-r0-00000001.fits -o {}/frame-r0-00000001.fits -f {}/fibermap-00000001.fits -p {} -w 5630,7740,0.8 -n {}".format(data_dir,exp_dir,sim_dir,psf_r,nspec)
    if not runcmd(cmd)[1]:
        raise RuntimeError('desi_extract_spectra failed for camera r0')

    cmd = "desi_extract_spectra -i {}/pix-z0-00000001.fits -o {}/frame-z0-00000001.fits -f {}/fibermap-00000001.fits -p {} -w 7650,9830,0.8 -n {}".format(data_dir,exp_dir,sim_dir,psf_z,nspec)
    if not runcmd(cmd)[1]:
        raise RuntimeError('desi_extract_spectra failed for camera z0')

    copyfile(os.path.join(sim_dir,'fibermap-00000002.fits'),os.path.join(data_dir,'fibermap-00000002.fits'))
    os.remove(os.path.join(data_dir,'simpix-00000002.fits'))

    for camera in ['r0','z0']:

        cmd = "desi_compute_fiberflat --infile {}/frame-{}-00000001.fits --outfile {}/fiberflat-{}-00000001.fits".format(exp_dir,camera,calib_dir,camera)
        if not runcmd(cmd)[1]:
            raise RuntimeError('desi_compute_fiberflat failed for camera {}'.format(camera))

        cmd = "desi_bootcalib --fiberflat {}/pix-{}-00000001.fits --arcfile {}/pix-{}-00000000.fits --outfile {}/psfboot-{}.fits".format(data_dir,camera,data_dir,camera,psf_dir,camera)
        if not runcmd(cmd)[1]:
            raise RuntimeError('desi_bootcalib failed for camera {}'.format(camera))

    return

def integration_test(args=None):
    """
    Run an integration test from raw data simulations through QuickLook pipeline

    Args:
        night (str, optional): YEARMMDD
        nspec (int, optional): number of spectra to simulate
        overwrite (bool, otional) : overwrite existing files
        delete (bool, optional) : delete all inputs and outputs

    Raises:
        RuntimeError if QuickLook fails
    """
    #- Parse arguments and check environment variables
    args = parse(args)

    night = args.night
    nspec = args.nspec

    raw_dir = os.environ['QL_SPEC_DATA']
    output_dir = os.environ['QL_SPEC_REDUX']
    
    #- Simulate inputs
    sim(night=night,nspec=nspec)
   
    #- Get the configuration file from desispec/data/quicklook
    from pkg_resources import resource_filename
    configfile=resource_filename('desispec','data/quicklook/qlconfig_dark.yaml')
    for camera in ['r0','z0']:
        
        #- Verify that quicklook pipeline runs
        cmd = "desi_quicklook -i {} -n {} -c {} -e 2".format(configfile,night,camera)
        if not runcmd(cmd)[1]:
            raise RuntimeError('quicklook pipeline failed for camera {}'.format(camera))

    #- Remove all output if desired
    if args.delete:
        sim_dir = os.path.join(os.environ['DESI_SPECTRO_SIM'],os.environ['PIXPROD'],args.night)
        if os.path.exists(sim_dir):
            sim_files = os.listdir(sim_dir)
            for file in range(len(sim_files)):
                sim_file = os.path.join(sim_dir,sim_files[file])
                os.remove(sim_file)
            os.rmdir(sim_dir)
        data_dir = os.path.join(raw_dir,night)
        if os.path.exists(data_dir):
            data_files = os.listdir(data_dir)
            for file in range(len(data_files)):
                data_file = os.path.join(data_dir,data_files[file])
                os.remove(data_file)
            os.rmdir(data_dir)
        if os.path.exists(output_dir):
            exp_dir = os.path.join(output_dir,'exposures',night)
            if os.path.exists(exp_dir):
                id_dir = os.path.join(exp_dir,'00000002')
                if os.path.exists(id_dir):
                    id_files = os.listdir(id_dir)
                    for file in range(len(id_files)):
                        id_file = os.path.join(id_dir,id_files[file])
                        os.remove(id_file)
                    os.rmdir(id_dir)
                exp_files = os.listdir(exp_dir)
                for file in range(len(exp_files)):
                    exp_file = os.path.join(exp_dir,exp_files[file])
                    os.remove(exp_file)
                os.rmdir(exp_dir)
            calib_dir=os.path.join(output_dir,'calib2d',night)
            if os.path.exists(calib_dir):
                calib_files = os.listdir(calib_dir)
                for file in range(len(calib_files)):
                    calib_file = os.path.join(calib_dir,calib_files[file])
                    os.remove(calib_file)
                os.rmdir(calib_dir)
            psf_dir=os.path.join(output_dir,'calib2d','psf',night)
            if os.path.exists(psf_dir):
                psf_files = os.listdir(psf_dir)
                for ii in range(len(psf_files)):
                    thisfile=os.path.join(psf_dir,psf_files[ii])
                    os.remove(thisfile)
                os.rmdir(psf_dir)


if __name__ == '__main__':
    integration_test()

